@startuml
participant ":FinTrack" as FT
participant ":Parser" as P
participant ":FinanceManager" as FM
participant ":Ui" as UI

FT -> UI: waitForInput()
activate FT
UI --> FT: "modify-expense 2 a/1500 c/RENT d/2025-01-01 desc/Updated rent"

FT -> P: returnFirstWord(input)
P --> FT: "modify-expense"

FT -> FT: switch(commandWord)

note right of FT: Handle MODIFY_EXPENSE_COMMAND

FT -> P: parseModifyExpense(input)
activate P

P -> P: extract index from args
note right of P: Parse "2 a/1500 c/RENT..."

P -> P: validate index is positive number

P -> P: parseAddExpense(ADD_EXPENSE_COMMAND + remainingArgs)
note right of P: Reuse add-expense parsing logic\nfor amount, category, date, desc

P --> FT: Map.Entry<index, newExpense>
deactivate P

FT -> FM: modifyExpense(index, newExpense)
activate FM

FM -> FM: deleteExpense(index)
note right of FM: Remove old expense at index

alt index is invalid or list is empty
    FM --> FT: IndexOutOfBoundsException
    FT -> UI: printError(message)
else index is valid
    FM -> FM: addExpense(newExpense)
    note right of FM: Add new expense\n(maintains reverse chronological order)
    
    FM -> FM: check if budget exceeded
    
    opt adding new expense fails
        FM -> FM: restore old expense
        FM --> FT: Exception
        FT -> UI: printError(message)
    end
    
    FM --> FT: isOverBudget (boolean)
    deactivate FM
    
    FT -> UI: printExpenseModified(newExpense, index)
    
    opt isOverBudget
        FT -> FM: getTotalExpenseForCategory(category)
        activate FM
        FM --> FT: totalSpent
        deactivate FM
        
        FT -> FM: getBudgetForCategory(category)
        activate FM
        FM --> FT: budget
        deactivate FM
        
        FT -> UI: printBudgetExceededWarning(category, budget, totalSpent)
    end
end

deactivate FT
@enduml
