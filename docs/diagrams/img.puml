@startuml UiExpenseListing
participant "Caller" as Caller
participant "Ui.printListOfExpenses()" as Ui
participant "List<Expense>" as ExpenseList
participant "Expense" as Expense
participant "Console\n(System.out)" as Console
participant "Logger" as Logger

Caller -> Ui : printListOfExpenses(expensesView)
activate Ui
Ui -> ExpenseList : isEmpty()
activate ExpenseList
ExpenseList --> Ui : result
deactivate ExpenseList
alt empty
    Ui -> Console : println("No expenses recorded.")
    activate Console
    Console --> Ui : printed
    deactivate Console
    Ui -> Logger : log(Level.FINE,\n"No expenses to list.")
    activate Logger
    Logger --> Ui : recorded
    deactivate Logger
    Ui --> Caller : return
    deactivate Ui
else not empty
    Ui -> Console : println("Expenses (Newest first):")
    activate Console
    Console --> Ui : printed
    deactivate Console
    loop each expense
        Ui -> ExpenseList : get(i)
        activate ExpenseList
        ExpenseList --> Ui : expense
        deactivate ExpenseList
        Ui -> Expense : validate + accessors
        activate Expense
        alt entry valid
            Expense --> Ui : values
            deactivate Expense
            Ui -> Console : print divider + details
            activate Console
            Console --> Ui : printed
            deactivate Console
        else RuntimeException
            Expense --> Ui : throws
            deactivate Expense
            Ui -> Logger : log(Level.WARNING,\n"Skipping malformed expense")
            activate Logger
            Logger --> Ui : recorded
            deactivate Logger
        end
    end
    Ui -> Console : print divider
    activate Console
    Console --> Ui : printed
    deactivate Console
    Ui -> Logger : log(Level.FINE,\n"Finished printing expenses list")
    activate Logger
    Logger --> Ui : recorded
    deactivate Logger
    Ui --> Caller : return
    deactivate Ui
end
@enduml